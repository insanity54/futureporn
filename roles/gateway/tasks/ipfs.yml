---

- name: Create the ipfs group
  ansible.builtin.user:
    name: ipfs

- name: Create the ipfs user
  ansible.builtin.user:
    name: ipfs
    groups: ipfs
    create_home: yes
    home: /home/ipfs

- name: Download go-ipfs
  ansible.builtin.get_url:
    url: https://dist.ipfs.io/go-ipfs/v0.11.0/go-ipfs_v0.11.0_linux-amd64.tar.gz
    dest: /root/
    checksum: sha256:aee3524b8467b94d3ba8950b8009e3c9bd56044dfffa208ec62e0c28711163ca
  register: dl

- name: unarchive go-ipfs
  # when: dl.changed is true
  ansible.builtin.unarchive:
    remote_src: yes
    src: /root/go-ipfs_v0.11.0_linux-amd64.tar.gz
    dest: /root/

- name: install go-ipfs
  ansible.builtin.copy:
    remote_src: yes
    src: /root/go-ipfs/ipfs
    dest: /usr/local/bin/ipfs
    mode: '0755'
    owner: root
    group: root

- name: Install ipfs system service
  ansible.builtin.template:
    src: templates/ipfs.service.j2
    dest: /etc/systemd/system/ipfs.service
    owner: root
    group: root
    mode: '0755'
  notify: 
    - restart ipfs

- name: create ufw HTTP exception for IPFS gateway
  community.general.ufw:
    rule: allow
    port: 80
    proto: tcp


- name: create ufw HTTPS exception for IPFS gateway
  community.general.ufw:
    rule: allow
    port: 443
    proto: tcp

- name: create ufw exception for IPFS swarm
  community.general.ufw:
    rule: allow
    port: 4000
    proto: tcp




- name: start ipfs
  ansible.builtin.systemd:
    name: ipfs
    state: started
    daemon_reload: yes


- name: configure ipfs StorageMax
  ansible.builtin.lineinfile:
    dest: /home/ipfs/.ipfs/config
    regexp: "StorageMax"
    line: "\"StorageMax\": \"20GB\","
    state: present
    owner: ipfs
    group: ipfs
  notify: restart ipfs


- name: configure ipfs GCPeriod
  ansible.builtin.lineinfile:
    dest: /home/ipfs/.ipfs/config
    regexp: "GCPeriod"
    line: "\"GCPeriod\": \"15m\","
    state: present
    owner: ipfs
    group: ipfs
  notify: restart ipfs
