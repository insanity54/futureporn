---

- name: Create the ipfs group
  ansible.builtin.group:
    name: ipfs

- name: Create the ipfs user
  ansible.builtin.user:
    name: ipfs
    groups: ipfs
    create_home: yes
    home: /home/ipfs

- name: Download kubo
  ansible.builtin.get_url:
    url: "https://dist.ipfs.tech/kubo/{{ ipfs_kubo_version }}/kubo_{{ ipfs_kubo_version }}_linux-amd64.tar.gz"
    dest: /root/
    checksum: sha256:7121f3e2d44a6a978d289a206cdbc7f10ba0348f7386c456ff1fdc4d4a8408d0

- name: unarchive kubo
  ansible.builtin.unarchive:
    remote_src: yes
    src: "/root/kubo_{{ ipfs_kubo_version }}_linux-amd64.tar.gz"
    dest: /root/

- name: install kubo
  ansible.builtin.copy:
    remote_src: yes
    src: /root/kubo/ipfs
    dest: /usr/local/bin/ipfs
    mode: '0755'
    owner: root
    group: root

- name: Install ipfs system service
  ansible.builtin.template:
    src: templates/ipfs.service.j2
    dest: /etc/systemd/system/ipfs.service
    owner: root
    group: root
    mode: '0755'
  notify: 
    - restart ipfs

- name: create ufw HTTP exception for IPFS gateway
  community.general.ufw:
    rule: allow
    port: 80
    proto: tcp


- name: create ufw HTTPS exception for IPFS gateway
  community.general.ufw:
    rule: allow
    port: 443
    proto: tcp

- name: create ufw exception for IPFS swarm
  community.general.ufw:
    rule: allow
    port: 4000
    proto: tcp


- name: install ipfs config
  template:
    src: templates/ipfs-config.json.j2
    dest: /home/ipfs/.ipfs/config
    owner: ipfs
    group: ipfs
    mode: '0600'

- name: init IPFS
  become: yes
  become_user: ipfs
  command: /usr/local/bin/ipfs init --empty-repo -- /home/ipfs/.ipfs/config
  args:
    creates: "/home/ipfs/.ipfs/config"
  notify: restart ipfs

- name: start ipfs
  ansible.builtin.systemd:
    name: ipfs
    state: started
    daemon_reload: yes

